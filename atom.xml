<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JAVA永不为奴!</title>
  
  <subtitle>技术总结、分享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blogtech.top/"/>
  <updated>2019-10-12T09:40:10.488Z</updated>
  <id>https://blogtech.top/</id>
  
  <author>
    <name>bebee4java</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java设计模式剖析</title>
    <link href="https://blogtech.top/2019/10/11/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%89%96%E6%9E%90/"/>
    <id>https://blogtech.top/2019/10/11/Java设计模式剖析/</id>
    <published>2019-10-11T12:04:56.000Z</published>
    <updated>2019-10-12T09:40:10.488Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;一直想写介绍设计模式的文章，让读者可以很快看完，而且一看就懂，看懂就会用，同时不会将各个模式搞混。当然这个需要有一定的编程经验才能做到。自己虽然不够nb，但也积累了一些经验，是时候写点东西了，也算是自我的总结。所以文中可能也存在一些纰漏，欢迎大家留言指正。</p><a id="more"></a><p>&emsp;&emsp;设计模式（Design pattern）是一套应该被反复使用的代码设计经验的总结。使用设计模式是为了可复用代码、让代码更易理解、保证代码的可靠性。</p><p>&emsp;&emsp;我知道大家（包括我在内）在写代码的时候可能不会那么刻意的去使用一些设计模式，但是它绝对是值得你去思考并使用的一套理论。项目中合理的运用设计模式可以完美的解决很多问题，并使你走向优秀代码的道路。</p><p>&emsp;&emsp;我接下来的几篇文章会以理论与实践相结合的方式来进行总结，希望广大程序爱好者和我一起，学好设计模式，做一个优秀的软件工程师！</p><h2 id="设计模式六大原则"><a href="#设计模式六大原则" class="headerlink" title="设计模式六大原则"></a>设计模式六大原则</h2><p>学习设计模式之前最好先了解一下设计模式的设计原则：</p><ol><li>开闭原则（open close principle）<br>开放即指对扩展开放，对修改关闭。简而言之，就是扩展功能的时候应该尽量的不修改原有的代码。</li><li>里氏代换原则（liskov substitution principle）<br>可以理解为派生类与基类的替换关系，是对”开-闭”原则的补充。通俗来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。也就是说：子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。</li><li>依赖倒转原则（dependence inverse principle）<br>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。目的是通过要面向接口的编程来降低类间的耦合性。符合高内聚低耦合原则。</li><li>接口隔离原则（Interface Segregation Principle）<br>使用多个隔离的接口，比使用单个接口要好，核心就是控制类的粒度大小、将对象解耦、提高其内聚性。</li><li>迪米特法则，又称最少知道原则（Demeter Principle）<br>一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。降低类之间的耦合度，提高了模块的相对独立性。</li><li>合成复用原则（Composite Reuse Principle）<br>尽量使用合成/聚合的方式，而不是使用继承。</li></ol><h2 id="设计模式类型"><a href="#设计模式类型" class="headerlink" title="设计模式类型"></a>设计模式类型</h2><p>&emsp;&emsp;根据设计模式的参考书<a href="DesignPatterns.pdf">Design Patterns - Elements of Reusable Object-Oriented Software</a>（中文译名：设计模式 - 可复用的面向对象软件元素，由GOF四人帮合著） 中所提到的，总共有 23 种设计模式。这些模式可以分为三大类：创建型模式（Creational Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns）。</p><h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h3><p>隐藏创建对象的创建逻辑，提供创建对象的接口，而非使用new关键字进行创建。</p><ul><li>单例模式（Singleton Pattern）</li><li>工厂模式（Factory Pattern）</li><li>抽象工厂模式（Abstract Factory Pattern）</li><li>建造者模式（Builder Pattern）</li><li>原型模式（Prototype Pattern）</li></ul><h3 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h3><p>这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</p><ul><li>适配器模式（Adapter Pattern）</li><li>桥接模式（Bridge Pattern）</li><li>过滤器模式（Filter、Criteria Pattern）</li><li>组合模式（Composite Pattern）</li><li>装饰器模式（Decorator Pattern）</li><li>外观模式（Facade Pattern）</li><li>享元模式（Flyweight Pattern）</li><li>代理模式（Proxy Pattern）</li></ul><h3 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h3><p>这些设计模式特别关注对象之间的通信。</p><ul><li>责任链模式（Chain of Responsibility Pattern）</li><li>命令模式（Command Pattern）</li><li>解释器模式（Interpreter Pattern）</li><li>迭代器模式（Iterator Pattern）</li><li>中介者模式（Mediator Pattern）</li><li>备忘录模式（Memento Pattern）</li><li>观察者模式（Observer Pattern）</li><li>状态模式（State Pattern）</li><li>空对象模式（Null Object Pattern）</li><li>策略模式（Strategy Pattern）</li><li>模板模式（Template Pattern）</li><li>访问者模式（Visitor Pattern）</li></ul><p>设计模式之间的关系可以用下图整体描述：<br><img src="//blogtech.top/2019/10/11/Java设计模式剖析/markdown-img-paste-2019101121061240.png" alt></p><p>&emsp;&emsp;该文主要介绍一些基本概念和理论知识，后续文章会结合代码的形式详细介绍每种设计模式使用方式，如果你着急关注实际的使用，也可以跳转某一种设计模式单独了解，不必要按顺序阅读。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;一直想写介绍设计模式的文章，让读者可以很快看完，而且一看就懂，看懂就会用，同时不会将各个模式搞混。当然这个需要有一定的编程经验才能做到。自己虽然不够nb，但也积累了一些经验，是时候写点东西了，也算是自我的总结。所以文中可能也存在一些纰漏，欢迎大家留言指正。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="https://blogtech.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Java" scheme="https://blogtech.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Java/"/>
    
    
      <category term="设计模式" scheme="https://blogtech.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Java" scheme="https://blogtech.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>conda使用技巧总结</title>
    <link href="https://blogtech.top/2019/10/10/conda%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/"/>
    <id>https://blogtech.top/2019/10/10/conda使用技巧总结/</id>
    <published>2019-10-10T12:35:24.000Z</published>
    <updated>2019-10-10T12:48:49.765Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建环境"><a href="#创建环境" class="headerlink" title="创建环境"></a>创建环境</h2><p>创建一个名为py35的环境，指定Python版本是3.5（不用管是3.5.x，conda会为我们自动寻找3.５.x中的最新版本）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name py35 python=<span class="number">3.5</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="激活环境"><a href="#激活环境" class="headerlink" title="激活环境"></a>激活环境</h2><p>激活py35环境<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source activate py35</span><br></pre></td></tr></table></figure></p><h2 id="返回主环境"><a href="#返回主环境" class="headerlink" title="返回主环境"></a>返回主环境</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source deactivate py35</span><br></pre></td></tr></table></figure><h2 id="删除环境"><a href="#删除环境" class="headerlink" title="删除环境"></a>删除环境</h2><p>删除一个已有的环境<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove --name py35 --all</span><br></pre></td></tr></table></figure></p><h2 id="查看系统中的所有环境"><a href="#查看系统中的所有环境" class="headerlink" title="查看系统中的所有环境"></a>查看系统中的所有环境</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda info -e</span><br></pre></td></tr></table></figure><h2 id="安装库"><a href="#安装库" class="headerlink" title="安装库"></a>安装库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install numpy</span><br></pre></td></tr></table></figure><h2 id="查看已经安装的库"><a href="#查看已经安装的库" class="headerlink" title="查看已经安装的库"></a>查看已经安装的库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda list</span><br></pre></td></tr></table></figure><h2 id="搜索package的信息"><a href="#搜索package的信息" class="headerlink" title="搜索package的信息"></a>搜索package的信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda search numpy</span><br></pre></td></tr></table></figure><h2 id="安装package到指定的环境"><a href="#安装package到指定的环境" class="headerlink" title="安装package到指定的环境"></a>安装package到指定的环境</h2><p>如果不用-n指定环境名称，则被安装在当前活跃环境，也可以通过-c指定通过某个channel安装<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -n py35 numpy</span><br></pre></td></tr></table></figure></p><h2 id="更新package"><a href="#更新package" class="headerlink" title="更新package"></a>更新package</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda update -n py35 numpy</span><br></pre></td></tr></table></figure><h2 id="删除package"><a href="#删除package" class="headerlink" title="删除package"></a>删除package</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove -n py35 numpy</span><br></pre></td></tr></table></figure><h2 id="设置国内镜像，加速conda"><a href="#设置国内镜像，加速conda" class="headerlink" title="设置国内镜像，加速conda"></a>设置国内镜像，加速conda</h2><p>在User主目录下生成.condarc文件，删掉channels下面的 -defaults一行,使其不再访问默认channel<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line"></span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line"></span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;创建环境&quot;&gt;&lt;a href=&quot;#创建环境&quot; class=&quot;headerlink&quot; title=&quot;创建环境&quot;&gt;&lt;/a&gt;创建环境&lt;/h2&gt;&lt;p&gt;创建一个名为py35的环境，指定Python版本是3.5（不用管是3.5.x，conda会为我们自动寻找3.５.x中的最新版本）&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;conda create --name py35 python=&lt;span class=&quot;number&quot;&gt;3.5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://blogtech.top/categories/python/"/>
    
    
      <category term="python" scheme="https://blogtech.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>mysql创建用户与授权</title>
    <link href="https://blogtech.top/2019/10/09/mysql%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E4%B8%8E%E6%8E%88%E6%9D%83/"/>
    <id>https://blogtech.top/2019/10/09/mysql创建用户与授权/</id>
    <published>2019-10-09T14:02:47.000Z</published>
    <updated>2019-10-09T14:21:54.757Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'username'</span>@<span class="string">'host'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'password'</span>;</span><br></pre></td></tr></table></figure><blockquote><p>说明:<br>username：你将创建的用户名<br>host：指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符<code>%</code><br>password：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器<br>例子：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'pig'</span>@<span class="string">'localhost'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'123456'</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'pig'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'123456'</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'pig'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">''</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'pig'</span>@<span class="string">'%'</span>;</span><br></pre></td></tr></table></figure></p></blockquote><a id="more"></a><h2 id="用户授权"><a href="#用户授权" class="headerlink" title="用户授权"></a>用户授权</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">privileges</span> <span class="keyword">ON</span> databasename.tablename <span class="keyword">TO</span> <span class="string">'username'</span>@<span class="string">'host'</span></span><br></pre></td></tr></table></figure><blockquote><p>说明：<br>privileges：用户的操作权限，如SELECT，INSERT，UPDATE等，如果要授予所的权限则使用ALL<br>databasename：数据库名<br>tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用<code>*</code>表示，如<code>*.*</code><br>例子：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span> <span class="keyword">ON</span> test.user <span class="keyword">TO</span> <span class="string">'pig'</span>@<span class="string">'%'</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'pig'</span>@<span class="string">'%'</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> test.* <span class="keyword">TO</span> <span class="string">'pig'</span>@<span class="string">'%'</span>;</span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong><br>用以上命令授权的用户不能给其它用户授权，如果想让该用户可以授权，用以下命令:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">privileges</span> <span class="keyword">ON</span> databasename.tablename <span class="keyword">TO</span> <span class="string">'username'</span>@<span class="string">'host'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="设置或更改用户密码"><a href="#设置或更改用户密码" class="headerlink" title="设置或更改用户密码"></a>设置或更改用户密码</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> <span class="string">'username'</span>@<span class="string">'host'</span> = <span class="keyword">PASSWORD</span>(<span class="string">'newpassword'</span>);</span><br></pre></td></tr></table></figure><blockquote><p>如果是当前登陆用户用:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> = <span class="keyword">PASSWORD</span>(<span class="string">"newpassword"</span>);</span><br></pre></td></tr></table></figure></p><p>例子：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> <span class="string">'pig'</span>@<span class="string">'%'</span> = <span class="keyword">PASSWORD</span>(<span class="string">"123456"</span>);</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> = <span class="keyword">PASSWORD</span>(<span class="string">"123456"</span>);</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="撤销用户权限"><a href="#撤销用户权限" class="headerlink" title="撤销用户权限"></a>撤销用户权限</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> privilege <span class="keyword">ON</span> databasename.tablename <span class="keyword">FROM</span> <span class="string">'username'</span>@<span class="string">'host'</span>;</span><br></pre></td></tr></table></figure><blockquote><p>具体信息可以用命令查看:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> <span class="string">'username'</span>@<span class="string">'host'</span>;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">'username'</span>@<span class="string">'host'</span>;</span><br></pre></td></tr></table></figure><blockquote><p>友情链接：<a href="https://www.cnblogs.com/sos-blue/p/6852945.html" target="_blank" rel="noopener">https://www.cnblogs.com/sos-blue/p/6852945.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;创建用户&quot;&gt;&lt;a href=&quot;#创建用户&quot; class=&quot;headerlink&quot; title=&quot;创建用户&quot;&gt;&lt;/a&gt;创建用户&lt;/h2&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;username&#39;&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&#39;host&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;IDENTIFIED&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;password&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;说明:&lt;br&gt;username：你将创建的用户名&lt;br&gt;host：指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符&lt;code&gt;%&lt;/code&gt;&lt;br&gt;password：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器&lt;br&gt;例子：&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;pig&#39;&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&#39;localhost&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;IDENTIFIED&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;123456&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;pig&#39;&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&#39;%&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;IDENTIFIED&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;123456&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;pig&#39;&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&#39;%&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;IDENTIFIED&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;pig&#39;&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&#39;%&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="https://blogtech.top/categories/mysql/"/>
    
    
      <category term="数据库" scheme="https://blogtech.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="mysql" scheme="https://blogtech.top/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>docker安装mysql搭建主从</title>
    <link href="https://blogtech.top/2019/10/08/docker%E5%AE%89%E8%A3%85mysql%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E/"/>
    <id>https://blogtech.top/2019/10/08/docker安装mysql搭建主从/</id>
    <published>2019-10-08T14:09:40.000Z</published>
    <updated>2019-10-11T02:28:44.646Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h2><p>docker search mysql:5.7</p><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><p>docker pull mysql:5.7</p><h2 id="运行mysql容器"><a href="#运行mysql容器" class="headerlink" title="运行mysql容器"></a>运行mysql容器</h2><h3 id="建立配置文件"><a href="#建立配置文件" class="headerlink" title="建立配置文件"></a>建立配置文件</h3><p><img src="//blogtech.top/2019/10/08/docker安装mysql搭建主从/markdown-img-paste-20191007232046365.png" alt></p><h4 id="master配置文件"><a href="#master配置文件" class="headerlink" title="master配置文件"></a>master配置文件</h4><p>vim master/conf/my.cnf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">server_id = 1</span><br><span class="line">log-bin= mysql-bin</span><br><span class="line">read-only=0</span><br><span class="line">replicate-ignore-db=mysql</span><br><span class="line">replicate-ignore-db=sys</span><br><span class="line">replicate-ignore-db=information_schema</span><br><span class="line">replicate-ignore-db=performance_schema</span><br></pre></td></tr></table></figure></p><a id="more"></a><h4 id="slave配置文件"><a href="#slave配置文件" class="headerlink" title="slave配置文件"></a>slave配置文件</h4><p>vim slave/conf/my.cnf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">server_id = 2</span><br><span class="line">log-bin= mysql-bin</span><br><span class="line">log_slave_updates=1</span><br><span class="line">read-only=1</span><br><span class="line">replicate-ignore-db=mysql</span><br><span class="line">replicate-ignore-db=sys</span><br><span class="line">replicate-ignore-db=information_schema</span><br><span class="line">replicate-ignore-db=performance_schema</span><br></pre></td></tr></table></figure></p><blockquote><p>注：从库还需要添加一个参数：log-slave-updates，log-slave-updates参数默认是关闭的状态，如果不手动设置，那么bin-log只会记录直接在主库上执行的SQL语句，由replication机制的SQL线程读取relay-log而执行的SQL语句并不会记录到bin-log，那么就无法实现从库binlog的实时同步。</p></blockquote><h3 id="运行mysql-master"><a href="#运行mysql-master" class="headerlink" title="运行mysql-master"></a>运行mysql-master</h3><p>docker run —name mastermysql \<br>-p 3307:3306 \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>-v ~/opt/docker/mysql/master/data:/var/lib/mysql \<br>-v ~/opt/docker/mysql/master/conf/my.cnf:/etc/mysql/my.cnf \<br>-d mysql:5.7</p><h3 id="运行mysql-salve"><a href="#运行mysql-salve" class="headerlink" title="运行mysql-salve"></a>运行mysql-salve</h3><p>docker run —name slavemysql \<br>-p 3308:3306 \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>-v ~/opt/docker/mysql/slave/data:/var/lib/mysql \<br>-v ~/opt/docker/mysql/slave/conf/my.cnf:/etc/mysql/my.cnf \<br>-d mysql:5.7</p><h2 id="查看docker镜像运行情况"><a href="#查看docker镜像运行情况" class="headerlink" title="查看docker镜像运行情况"></a>查看docker镜像运行情况</h2><p>docker ps<br><img src="//blogtech.top/2019/10/08/docker安装mysql搭建主从/markdown-img-paste-20190926115002849.png" alt></p><h2 id="进入master容器"><a href="#进入master容器" class="headerlink" title="进入master容器"></a>进入master容器</h2><p>docker exec -it mastermysql bash</p><h2 id="进入mysql"><a href="#进入mysql" class="headerlink" title="进入mysql"></a>进入mysql</h2><p>root@a77371ae40bd:/# mysql -uroot -p123456</p><h2 id="查看master状态"><a href="#查看master状态" class="headerlink" title="查看master状态"></a>查看master状态</h2><p>mysql&gt; show master status;<br><img src="//blogtech.top/2019/10/08/docker安装mysql搭建主从/markdown-img-paste-20190926115058346.png" alt></p><h2 id="创建binlog用户，授权"><a href="#创建binlog用户，授权" class="headerlink" title="创建binlog用户，授权"></a>创建binlog用户，授权</h2><h3 id="创建binlog用户密码为binlog"><a href="#创建binlog用户密码为binlog" class="headerlink" title="创建binlog用户密码为binlog"></a>创建binlog用户密码为binlog</h3><p>CREATE USER ‘binlog’@’%’ IDENTIFIED BY ‘binlog’;</p><h3 id="授权binlog用户拥有binlog库所有表的所有权限"><a href="#授权binlog用户拥有binlog库所有表的所有权限" class="headerlink" title="授权binlog用户拥有binlog库所有表的所有权限"></a>授权binlog用户拥有binlog库所有表的所有权限</h3><p>GRANT ALL ON binlog.* TO ‘binlog’@’%’;</p><h3 id="授予用户-binlog-REPLICATION-SLAVE-权限和-REPLICATION-CLIENT-权限，用于在主从库之间同步数据。"><a href="#授予用户-binlog-REPLICATION-SLAVE-权限和-REPLICATION-CLIENT-权限，用于在主从库之间同步数据。" class="headerlink" title="授予用户 binlog REPLICATION SLAVE 权限和 REPLICATION CLIENT 权限，用于在主从库之间同步数据。"></a>授予用户 binlog REPLICATION SLAVE 权限和 REPLICATION CLIENT 权限，用于在主从库之间同步数据。</h3><p>GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO ‘binlog’@’%’;</p><h2 id="进入salve容器"><a href="#进入salve容器" class="headerlink" title="进入salve容器"></a>进入salve容器</h2><p>docker exec -it slavemysql bash</p><h2 id="在Slave中进入mysql，执行"><a href="#在Slave中进入mysql，执行" class="headerlink" title="在Slave中进入mysql，执行:"></a>在Slave中进入mysql，执行:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CHANGE MASTER TO master_host = &apos;172.17.0.2&apos;,</span><br><span class="line">master_user = &apos;binlog&apos;,</span><br><span class="line">master_password = &apos;binlog&apos;,</span><br><span class="line">master_port = 3306,</span><br><span class="line">master_log_file = &apos;mysql-bin.000003&apos;,</span><br><span class="line">master_log_pos = 154,</span><br><span class="line">master_connect_retry = 30;</span><br></pre></td></tr></table></figure><p><strong>注：</strong></p><blockquote><p>master_host ：Master 的地址，指的是容器的独立ip, 可以通过下面命令查询：</p> docker inspect --format='{{.NetworkSettings.IPAddress}}' 容器名称 | 容器id <p><img src="//blogtech.top/2019/10/08/docker安装mysql搭建主从/markdown-img-paste-20190926115222899.png" alt></p><p>master_port：Master 的端口号，指的是容器的端口号</p><p>master_user：用于数据同步的用户</p><p>master_password：用于同步的用户的密码</p><p>master_log_file：指定 Slave 从哪个日志文件开始复制数据，即上文中提到的 File 字段的值（主库记录的值）</p><p>master_log_pos：从哪个 Position 开始读，即上文中提到的 Position 字段的值（主库的pos值）</p><p>master_connect_retry：如果连接失败，重试的时间间隔，单位是秒，默认是 60 秒</p></blockquote><h2 id="查询主从同步状态"><a href="#查询主从同步状态" class="headerlink" title="查询主从同步状态:"></a>查询主从同步状态:</h2><p>show slave status \G;</p><p><img src="//blogtech.top/2019/10/08/docker安装mysql搭建主从/markdown-img-paste-20190926115401342.png" alt></p><h2 id="开启主从复制过程"><a href="#开启主从复制过程" class="headerlink" title="开启主从复制过程"></a>开启主从复制过程</h2><p>start slave;</p><p>再次查询主从同步状态 show slave status \G;<br><img src="//blogtech.top/2019/10/08/docker安装mysql搭建主从/markdown-img-paste-20190926115534116.png" alt></p><h2 id="在master库新建binlog库-mlsql-binlog表进行同步测试："><a href="#在master库新建binlog库-mlsql-binlog表进行同步测试：" class="headerlink" title="在master库新建binlog库 mlsql_binlog表进行同步测试："></a>在master库新建binlog库 mlsql_binlog表进行同步测试：</h2><p><details><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">binlog</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="keyword">binlog</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`mlsql_binlog`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`log`</span> <span class="built_in">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`mlsql_binlog`</span> (<span class="string">`id`</span>, <span class="string">`log`</span>) <span class="keyword">values</span>(<span class="number">1</span>, <span class="string">'hello'</span>);</span><br></pre></td></tr></table></figure></details></p><blockquote><p>友情链接：<a href="https://learnku.com/articles/30439" target="_blank" rel="noopener">https://learnku.com/articles/30439</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;查看镜像&quot;&gt;&lt;a href=&quot;#查看镜像&quot; class=&quot;headerlink&quot; title=&quot;查看镜像&quot;&gt;&lt;/a&gt;查看镜像&lt;/h2&gt;&lt;p&gt;docker search mysql:5.7&lt;/p&gt;&lt;h2 id=&quot;拉取镜像&quot;&gt;&lt;a href=&quot;#拉取镜像&quot; class=&quot;headerlink&quot; title=&quot;拉取镜像&quot;&gt;&lt;/a&gt;拉取镜像&lt;/h2&gt;&lt;p&gt;docker pull mysql:5.7&lt;/p&gt;&lt;h2 id=&quot;运行mysql容器&quot;&gt;&lt;a href=&quot;#运行mysql容器&quot; class=&quot;headerlink&quot; title=&quot;运行mysql容器&quot;&gt;&lt;/a&gt;运行mysql容器&lt;/h2&gt;&lt;h3 id=&quot;建立配置文件&quot;&gt;&lt;a href=&quot;#建立配置文件&quot; class=&quot;headerlink&quot; title=&quot;建立配置文件&quot;&gt;&lt;/a&gt;建立配置文件&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;//blogtech.top/2019/10/08/docker安装mysql搭建主从/markdown-img-paste-20191007232046365.png&quot; alt&gt;&lt;/p&gt;&lt;h4 id=&quot;master配置文件&quot;&gt;&lt;a href=&quot;#master配置文件&quot; class=&quot;headerlink&quot; title=&quot;master配置文件&quot;&gt;&lt;/a&gt;master配置文件&lt;/h4&gt;&lt;p&gt;vim master/conf/my.cnf&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[mysqld]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server_id = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;log-bin= mysql-bin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;read-only=0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;replicate-ignore-db=mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;replicate-ignore-db=sys&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;replicate-ignore-db=information_schema&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;replicate-ignore-db=performance_schema&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker" scheme="https://blogtech.top/categories/docker/"/>
    
    
      <category term="docker" scheme="https://blogtech.top/tags/docker/"/>
    
      <category term="虚拟化" scheme="https://blogtech.top/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>docker常用操作及技巧</title>
    <link href="https://blogtech.top/2019/10/07/docker%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%8F%8A%E6%8A%80%E5%B7%A7/"/>
    <id>https://blogtech.top/2019/10/07/docker常用操作及技巧/</id>
    <published>2019-10-07T09:52:24.000Z</published>
    <updated>2019-10-11T02:29:02.660Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Dockerfile命令"><a href="#Dockerfile命令" class="headerlink" title="Dockerfile命令"></a>Dockerfile命令</h2><blockquote><p>官网介绍：<a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/builder/</a></p></blockquote><ol><li><p>FROM</p><p><code>FROM &lt;image&gt;:&lt;tag&gt;</code></p><p> 用于设置基础镜像，一般是Dockerfile的第一句。如果没有指定tag，则默认tag是latest。</p></li><li><p>MAINTAINER</p><p><code>MAINTAINER &lt;name&gt;</code></p><p>用来指定维护者的姓名和联系方式。</p></li><li><p>RUN</p><p><code>RUN &lt;command&gt; 或 RUN [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</code></p><p>每条 RUN 指令将在当前镜像基础上执行指定命令，并提交为新的镜像。</p></li><li><p>ADD</p><p><code>ADD &lt;src&gt; &lt;dest&gt;</code></p><p>将文件复制到文件：是相对被构建的源目录的相对路径，可以是文件或目录的路径，也可以是一个远程的文件 url，是容器中的绝对路径。</p></li><li><p>COPY</p><p><code>COPY &lt;src&gt; &lt;dest&gt;</code></p><p>复制本地主机的（为Dockerfile所在目录的相对路径）到容器中的,与ADD指令差不多</p></li><li><p>ENTRYPOINT</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT [<span class="string">"executable"</span>,<span class="string">"param1"</span>,<span class="string">"param2"</span>] ：推荐使用的<span class="built_in">exec</span>形式</span><br><span class="line">ENTRYPOINT <span class="built_in">command</span> param1 param2 ：shell 形式</span><br></pre></td></tr></table></figure><p>配置容器启动后执行的命令，并且不可被 docker run 提供的参数覆盖。一个 Dockerfile 中只能有一个 ENTRYPOINT，如果有多个，则最后一个生效。</p></li><li><p>CMD</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CMD [<span class="string">"executable"</span>,<span class="string">"param1"</span>,<span class="string">"param2"</span>] 使用<span class="built_in">exec</span>执行，推荐方式；</span><br><span class="line">CMD <span class="built_in">command</span> param1 param2 在/bin/sh 中执行，提供给需要交互的应用；</span><br><span class="line">CMD [<span class="string">"param1"</span>,<span class="string">"param2"</span>]提供给ENTRYPOINT 的默认参数；</span><br></pre></td></tr></table></figure><p>指定启动容器时执行的命令，每个 Dockerfile 只能有一条 CMD 命令。如果指定了多条命令，只有最后一条会被执行。如果用户启动容器时候指定了运行的命令，则会覆盖掉 CMD 指定的命令。</p></li><li><p>WORKDIR</p><p><code>WORKDIR /path/to/workdir</code></p><p>为后续的 RUN、CMD、ENTRYPOINT 指令配置工作目录。可以使用多个 WORKDIR 指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。例如：<br>WORKDIR /a<br>WORKDIR b<br>WORKDIR c<br>RUN pwd<br>则最终路径为 /a/b/c 。</p></li><li><p>EXPOSE</p><p><code>EXPOSE &lt;port&gt; [&lt;port&gt;...]</code></p><p>告诉 Docker 服务端容器暴露的端口号，供互联系统使用。例如：EXPOSE 8080 3000，开放 8080 和 3000 端口。</p></li><li><p>ENV</p><p><code>ENV &lt;key&gt; &lt;value&gt;</code><br>指定一个环境变量，会被后续 RUN 指令使用，并在容器运行时保持。</p></li><li><p>VOLUME</p><p><code>VOLUME [&quot;/data&quot;]</code></p><p>创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等。</p></li><li><p>USER</p><p><code>USER &lt;UID/Username&gt;</code></p><p>为容器内指定 CMD RUN ENTRYPOINT 命令运行时的用户名或UID。</p></li></ol><a id="more"></a><h2 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h2><blockquote><p>官网介绍：<a href="https://docs.docker.com/engine/reference/commandline/docker/" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/commandline/docker/</a></p></blockquote><h3 id="镜像相关"><a href="#镜像相关" class="headerlink" title="镜像相关"></a>镜像相关</h3><ol><li>查看本地仓库的镜像：<code>docker images</code></li><li>拉取远程仓库镜像：<code>docker pull REPOSITORY:TAG</code></li><li>将本地镜像推送到远程仓库：<code>docker push REPOSITORY:TAG</code><blockquote><p>一般需要三步：<br>A. 先将已有镜像打标签:<code>docker tag IMAGE_ID REPOSITORY:TAG</code> 需要tag为远程的仓库地址<br>B. 登录远程仓库：<code>docker login –username=USERNAME REPOSITORY_REGOIN</code><br>C. 推送镜像到远程仓库：<code>docker push REPOSITORY:TAG</code></p></blockquote></li><li>使用Dockerfile构建镜像: <code>docker build -t REPOSITORY:TAG .</code><blockquote><p>.点表示当前目录，默认会找当前目录下的Dockerfile进行构建，也可以通过<code>-f</code>指定Dockerfile：<code>docker build -f /path/Dockerfile -t REPOSITORY:TAG .</code></p></blockquote></li><li>删除镜像：<code>docker rmi IMAGE_ID/ REPOSITORY:TAG</code><blockquote><p>强制删除：<code>docker rmi -f IMAGE_ID</code></p></blockquote></li><li>删除untagged images：<code>docker rmi $(docker images | grep &quot;^&lt;none&gt;&quot; | awk &quot;{print $3}&quot;)</code></li><li>删除全部image：<code>docker rmi $(docker images -q)</code></li><li>删除所有不使用的镜像：<code>docker image prune --force --all</code> 或 <code>docker image prune -f -a</code></li></ol><h3 id="容器相关"><a href="#容器相关" class="headerlink" title="容器相关"></a>容器相关</h3><ol><li>查看正在运行的容器：<code>docker ps</code></li><li>列出所有容器ID：<code>docker ps -aq</code></li><li>查看正在运行容器的日志：<code>docker logs -f CONTAINER_ID</code></li><li>列出所有容器：<code>docker container list</code></li><li>停止容器：<code>docker stop CONTAINER_ID</code><blockquote><p>停止所有的container：<code>docker stop $(docker ps -a -q)</code></p></blockquote></li><li>删除容器：<code>docker rm CONTAINER_ID</code><blockquote><p>删除所有container：<code>docker rm $(docker ps -a -q)</code></p></blockquote></li><li>从容器到宿主机复制：<code>docker cp CONTAINER:SRC_PATH DEST_PATH</code></li><li>从宿主机到容器复制：<code>docker cp SRC_PATH CONTAINER:DEST_PATH</code></li><li>删除所有停止的容器：<code>docker container prune</code></li><li>停止/启动/杀死/重启一个容器：<code>docker stop/start/kill/restart CONTAINER_ID/CONTAINER_NAME</code></li><li>进入容器：<code>docker exec -it CONTAINER_ID /bin/bash</code><blockquote><p>docker exec ：在运行的容器中执行命令<br>-d :分离模式: 在后台运行<br>-i :即使没有附加也保持STDIN（标准输入） 打开,以交互运行容器，通常与 -t 同时使用；<br>-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</p></blockquote></li><li>运行容器：<code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code><blockquote><p>OPTIONS说明：<br>   -a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；<br>   -d: 后台运行容器，并返回容器ID；<br>   -i: 以交互模式运行容器，通常与 -t 同时使用；<br>   -P: 随机端口映射，容器内部端口随机映射到主机的高端口<br>   -p: 指定端口映射，格式为：主机(宿主)端口:容器端口<br>   -t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；<br>   —name=”nginx-lb”: 为容器指定一个名称；<br>   —dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；<br>   —dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；<br>   -h “mars”: 指定容器的hostname；<br>   -e username=”ritchie”: 设置环境变量；<br>   —env-file=[]: 从指定文件读入环境变量；<br>   —cpuset=”0-2” or —cpuset=”0,1,2”: 绑定容器到指定CPU运行；<br>   -m :设置容器使用内存最大值；<br>   —net=”bridge”: 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；<br>   —link=[]: 添加链接到另一个容器；<br>   —expose=[]: 开放一个端口或一组端口；<br>   —volume , -v: 绑定一个卷</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Dockerfile命令&quot;&gt;&lt;a href=&quot;#Dockerfile命令&quot; class=&quot;headerlink&quot; title=&quot;Dockerfile命令&quot;&gt;&lt;/a&gt;Dockerfile命令&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;官网介绍：&lt;a href=&quot;https://docs.docker.com/engine/reference/builder/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.docker.com/engine/reference/builder/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;FROM&lt;/p&gt;
&lt;p&gt;&lt;code&gt;FROM &amp;lt;image&amp;gt;:&amp;lt;tag&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt; 用于设置基础镜像，一般是Dockerfile的第一句。如果没有指定tag，则默认tag是latest。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MAINTAINER&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MAINTAINER &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;用来指定维护者的姓名和联系方式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RUN&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RUN &amp;lt;command&amp;gt; 或 RUN [&amp;quot;executable&amp;quot;,&amp;quot;param1&amp;quot;,&amp;quot;param2&amp;quot;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;每条 RUN 指令将在当前镜像基础上执行指定命令，并提交为新的镜像。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ADD&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ADD &amp;lt;src&amp;gt; &amp;lt;dest&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;将文件复制到文件：是相对被构建的源目录的相对路径，可以是文件或目录的路径，也可以是一个远程的文件 url，是容器中的绝对路径。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;COPY&lt;/p&gt;
&lt;p&gt;&lt;code&gt;COPY &amp;lt;src&amp;gt; &amp;lt;dest&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;复制本地主机的（为Dockerfile所在目录的相对路径）到容器中的,与ADD指令差不多&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ENTRYPOINT&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ENTRYPOINT [&lt;span class=&quot;string&quot;&gt;&quot;executable&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;param1&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;param2&quot;&lt;/span&gt;] ：推荐使用的&lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt;形式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ENTRYPOINT &lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt; param1 param2 ：shell 形式&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;配置容器启动后执行的命令，并且不可被 docker run 提供的参数覆盖。一个 Dockerfile 中只能有一个 ENTRYPOINT，如果有多个，则最后一个生效。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CMD&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CMD [&lt;span class=&quot;string&quot;&gt;&quot;executable&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;param1&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;param2&quot;&lt;/span&gt;] 使用&lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt;执行，推荐方式；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CMD &lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt; param1 param2 在/bin/sh 中执行，提供给需要交互的应用；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CMD [&lt;span class=&quot;string&quot;&gt;&quot;param1&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;param2&quot;&lt;/span&gt;]提供给ENTRYPOINT 的默认参数；&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;指定启动容器时执行的命令，每个 Dockerfile 只能有一条 CMD 命令。如果指定了多条命令，只有最后一条会被执行。如果用户启动容器时候指定了运行的命令，则会覆盖掉 CMD 指定的命令。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;WORKDIR&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WORKDIR /path/to/workdir&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;为后续的 RUN、CMD、ENTRYPOINT 指令配置工作目录。可以使用多个 WORKDIR 指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。例如：&lt;br&gt;WORKDIR /a&lt;br&gt;WORKDIR b&lt;br&gt;WORKDIR c&lt;br&gt;RUN pwd&lt;br&gt;则最终路径为 /a/b/c 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;EXPOSE&lt;/p&gt;
&lt;p&gt;&lt;code&gt;EXPOSE &amp;lt;port&amp;gt; [&amp;lt;port&amp;gt;...]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;告诉 Docker 服务端容器暴露的端口号，供互联系统使用。例如：EXPOSE 8080 3000，开放 8080 和 3000 端口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ENV&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ENV &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;&lt;/code&gt;&lt;br&gt;指定一个环境变量，会被后续 RUN 指令使用，并在容器运行时保持。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;VOLUME&lt;/p&gt;
&lt;p&gt;&lt;code&gt;VOLUME [&amp;quot;/data&amp;quot;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;USER&lt;/p&gt;
&lt;p&gt;&lt;code&gt;USER &amp;lt;UID/Username&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;为容器内指定 CMD RUN ENTRYPOINT 命令运行时的用户名或UID。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="docker" scheme="https://blogtech.top/categories/docker/"/>
    
    
      <category term="docker" scheme="https://blogtech.top/tags/docker/"/>
    
      <category term="虚拟化" scheme="https://blogtech.top/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://blogtech.top/2019/09/27/hello-world/"/>
    <id>https://blogtech.top/2019/09/27/hello-world/</id>
    <published>2019-09-27T10:12:53.966Z</published>
    <updated>2019-09-27T10:12:53.967Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
