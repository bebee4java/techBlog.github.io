<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[docker安装mysql搭建主从]]></title>
    <url>%2F2019%2F10%2F07%2Fdocker%E5%AE%89%E8%A3%85mysql%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E%2F</url>
    <content type="text"><![CDATA[查看镜像docker search mysql:5.7 拉取镜像docker pull mysql:5.7 运行mysql容器建立配置文件 master配置文件vim master/conf/my.cnf12345678[mysqld]server_id = 1log-bin= mysql-binread-only=0replicate-ignore-db=mysqlreplicate-ignore-db=sysreplicate-ignore-db=information_schemareplicate-ignore-db=performance_schema slave配置文件vim slave/conf/my.cnf123456789[mysqld]server_id = 2log-bin= mysql-binlog_slave_updates=1read-only=1replicate-ignore-db=mysqlreplicate-ignore-db=sysreplicate-ignore-db=information_schemareplicate-ignore-db=performance_schema 注：从库还需要添加一个参数：log-slave-updates，log-slave-updates参数默认是关闭的状态，如果不手动设置，那么bin-log只会记录直接在主库上执行的SQL语句，由replication机制的SQL线程读取relay-log而执行的SQL语句并不会记录到bin-log，那么就无法实现从库binlog的实时同步。 运行mysql-masterdocker run —name mastermysql \-p 3307:3306 \-e MYSQL_ROOT_PASSWORD=123456 \-v ~/opt/docker/mysql/master/data:/var/lib/mysql \-v ~/opt/docker/mysql/master/conf/my.cnf:/etc/mysql/my.cnf \-d mysql:5.7 运行mysql-salvedocker run —name slavemysql \-p 3308:3306 \-e MYSQL_ROOT_PASSWORD=123456 \-v ~/opt/docker/mysql/slave/data:/var/lib/mysql \-v ~/opt/docker/mysql/slave/conf/my.cnf:/etc/mysql/my.cnf \-d mysql:5.7 查看docker镜像运行情况docker ps 进入master容器docker exec -it mastermysql bash 进入mysqlroot@a77371ae40bd:/# mysql -uroot -p123456 查看master状态mysql&gt; show master status; 创建binlog用户，授权创建binlog用户密码为binlogCREATE USER ‘binlog’@’%’ IDENTIFIED BY ‘binlog’; 授权binlog用户拥有binlog库所有表的所有权限GRANT ALL ON binlog.* TO ‘binlog’@’%’; 授予用户 binlog REPLICATION SLAVE 权限和 REPLICATION CLIENT 权限，用于在主从库之间同步数据。GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO ‘binlog’@’%’;]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>虚拟化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F09%2F27%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
